<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\MKL LoRaWAN GW v1.1]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\MKL LoRaWAN GW v1.1</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Wed Jul 05 09:58:16 2017
<BR><P>
<H3>Maximum Stack Usage =        292 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
prepareCMDToRelay &rArr; CSMAStart &rArr; CSMAExecute &rArr; Execute &rArr; sendCMDToRelay &rArr; SendFrame &rArr; Send &rArr; SendFrameOnChannel &rArr; SX1276SetTxConfig &rArr; SX1276SetModem &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SPI_Write_Buf &rArr; SPI_Write &rArr; SPI_RW &rArr; GPIO_PinHigh
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[6a]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[6]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">NMI_Handler</a><BR>
 <LI><a href="#[7]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">HardFault_Handler</a><BR>
 <LI><a href="#[8]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">SVC_Handler</a><BR>
 <LI><a href="#[9]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">PendSV_Handler</a><BR>
 <LI><a href="#[1a]">ADC0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a]">ADC0_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1a]">ADC0_IRQHandler</a> from startup_mkl16z4.o(.text) referenced from startup_mkl16z4.o(RESET)
 <LI><a href="#[1b]">CMP0_IRQHandler</a> from startup_mkl16z4.o(.text) referenced from startup_mkl16z4.o(RESET)
 <LI><a href="#[31]">CheckSend</a> from csma.o(i.CheckSend) referenced from csma.o(i.Execute)
 <LI><a href="#[24]">DAC0_IRQHandler</a> from startup_mkl16z4.o(.text) referenced from startup_mkl16z4.o(RESET)
 <LI><a href="#[b]">DMA0_IRQHandler</a> from startup_mkl16z4.o(.text) referenced from startup_mkl16z4.o(RESET)
 <LI><a href="#[c]">DMA1_IRQHandler</a> from startup_mkl16z4.o(.text) referenced from startup_mkl16z4.o(RESET)
 <LI><a href="#[d]">DMA2_IRQHandler</a> from startup_mkl16z4.o(.text) referenced from startup_mkl16z4.o(RESET)
 <LI><a href="#[e]">DMA3_IRQHandler</a> from startup_mkl16z4.o(.text) referenced from startup_mkl16z4.o(RESET)
 <LI><a href="#[30]">Execute</a> from csma.o(i.Execute) referenced from csma.o(i.CheckSend)
 <LI><a href="#[10]">FTFA_IRQHandler</a> from startup_mkl16z4.o(.text) referenced from startup_mkl16z4.o(RESET)
 <LI><a href="#[7]">HardFault_Handler</a> from startup_mkl16z4.o(.text) referenced from startup_mkl16z4.o(RESET)
 <LI><a href="#[13]">I2C0_IRQHandler</a> from startup_mkl16z4.o(.text) referenced from startup_mkl16z4.o(RESET)
 <LI><a href="#[14]">I2C1_IRQHandler</a> from startup_mkl16z4.o(.text) referenced from startup_mkl16z4.o(RESET)
 <LI><a href="#[22]">I2S0_IRQHandler</a> from startup_mkl16z4.o(.text) referenced from startup_mkl16z4.o(RESET)
 <LI><a href="#[12]">LLW_IRQHandler</a> from startup_mkl16z4.o(.text) referenced from startup_mkl16z4.o(RESET)
 <LI><a href="#[27]">LPTimer_IRQHandler</a> from startup_mkl16z4.o(.text) referenced from startup_mkl16z4.o(RESET)
 <LI><a href="#[11]">LVD_LVW_IRQHandler</a> from startup_mkl16z4.o(.text) referenced from startup_mkl16z4.o(RESET)
 <LI><a href="#[26]">MCG_IRQHandler</a> from startup_mkl16z4.o(.text) referenced from startup_mkl16z4.o(RESET)
 <LI><a href="#[6]">NMI_Handler</a> from startup_mkl16z4.o(.text) referenced from startup_mkl16z4.o(RESET)
 <LI><a href="#[2f]">OnLedBoardInitPeriphEvent</a> from board.o(i.OnLedBoardInitPeriphEvent) referenced from board.o(i.BoardInitPeriph)
 <LI><a href="#[21]">PIT_IRQHandler</a> from startup_mkl16z4.o(.text) referenced from startup_mkl16z4.o(RESET)
 <LI><a href="#[29]">PORTA_IRQHandler</a> from gpio.o(i.PORTA_IRQHandler) referenced from startup_mkl16z4.o(RESET)
 <LI><a href="#[2a]">PORTC_PORTD_IRQHandler</a> from gpio.o(i.PORTC_PORTD_IRQHandler) referenced from startup_mkl16z4.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from startup_mkl16z4.o(.text) referenced from startup_mkl16z4.o(RESET)
 <LI><a href="#[1f]">RTC_IRQHandler</a> from startup_mkl16z4.o(.text) referenced from startup_mkl16z4.o(RESET)
 <LI><a href="#[20]">RTC_Seconds_IRQHandler</a> from startup_mkl16z4.o(.text) referenced from startup_mkl16z4.o(RESET)
 <LI><a href="#[f]">Reserved20_IRQHandler</a> from startup_mkl16z4.o(.text) referenced from startup_mkl16z4.o(RESET)
 <LI><a href="#[23]">Reserved40_IRQHandler</a> from startup_mkl16z4.o(.text) referenced from startup_mkl16z4.o(RESET)
 <LI><a href="#[28]">Reserved45_IRQHandler</a> from startup_mkl16z4.o(.text) referenced from startup_mkl16z4.o(RESET)
 <LI><a href="#[5]">Reset_Handler</a> from startup_mkl16z4.o(.text) referenced from startup_mkl16z4.o(RESET)
 <LI><a href="#[15]">SPI0_IRQHandler</a> from startup_mkl16z4.o(.text) referenced from startup_mkl16z4.o(RESET)
 <LI><a href="#[16]">SPI1_IRQHandler</a> from startup_mkl16z4.o(.text) referenced from startup_mkl16z4.o(RESET)
 <LI><a href="#[8]">SVC_Handler</a> from startup_mkl16z4.o(.text) referenced from startup_mkl16z4.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from timer.o(i.SysTick_Handler) referenced from startup_mkl16z4.o(RESET)
 <LI><a href="#[2b]">SystemInit</a> from system_mkl16z4.o(i.SystemInit) referenced from startup_mkl16z4.o(.text)
 <LI><a href="#[1c]">TPM0_IRQHandler</a> from startup_mkl16z4.o(.text) referenced from startup_mkl16z4.o(RESET)
 <LI><a href="#[1d]">TPM1_IRQHandler</a> from startup_mkl16z4.o(.text) referenced from startup_mkl16z4.o(RESET)
 <LI><a href="#[1e]">TPM2_IRQHandler</a> from startup_mkl16z4.o(.text) referenced from startup_mkl16z4.o(RESET)
 <LI><a href="#[25]">TSI0_IRQHandler</a> from startup_mkl16z4.o(.text) referenced from startup_mkl16z4.o(RESET)
 <LI><a href="#[33]">TaskHandleDataConfirmUp</a> from loramac_qh.o(i.TaskHandleDataConfirmUp) referenced from loramac_qh.o(i.OnRadioRxDone)
 <LI><a href="#[34]">TaskHandleDataUnconFirmUp</a> from loramac_qh.o(i.TaskHandleDataUnconFirmUp) referenced from loramac_qh.o(i.OnRadioRxDone)
 <LI><a href="#[32]">TaskHandleJoin_Req</a> from loramac_qh.o(i.TaskHandleJoin_Req) referenced from loramac_qh.o(i.OnRadioRxDone)
 <LI><a href="#[35]">TaskHandleTxDone</a> from loramac_qh.o(i.TaskHandleTxDone) referenced from loramac_qh.o(i.OnRadioTxDone)
 <LI><a href="#[17]">UART0_IRQHandler</a> from uart.o(i.UART0_IRQHandler) referenced from startup_mkl16z4.o(RESET)
 <LI><a href="#[18]">UART1_IRQHandler</a> from uart.o(i.UART1_IRQHandler) referenced from startup_mkl16z4.o(RESET)
 <LI><a href="#[19]">UART2_IRQHandler</a> from uart.o(i.UART2_IRQHandler) referenced from startup_mkl16z4.o(RESET)
 <LI><a href="#[39]">__main</a> from __main.o(!!!main) referenced from startup_mkl16z4.o(.text)
 <LI><a href="#[2e]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[2d]">fputc</a> from uart.o(i.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[38]">prepareCMDToRelay</a> from main.o(i.prepareCMDToRelay) referenced from main.o(i.main)
 <LI><a href="#[37]">resetNbCMDInFlash</a> from debug.o(i.resetNbCMDInFlash) referenced from uart.o(i.UART1_IRQHandler)
 <LI><a href="#[36]">sendNbCMDToPC</a> from debug.o(i.sendNbCMDToPC) referenced from uart.o(i.UART1_IRQHandler)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[39]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[3a]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[3c]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[d5]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[d6]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[3d]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[d7]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[51]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[3e]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent_end
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[3f]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[46]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[d8]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[d9]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[da]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[41]"></a>__rt_lib_init_rand_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_rand_2 &rArr; _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[db]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[dc]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[dd]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[de]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[df]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[e0]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[e1]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[e2]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[e3]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[e4]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[e5]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[e6]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[e7]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[e8]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[e9]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[ea]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[eb]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[ec]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[4b]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[ed]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[ee]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[ef]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[f0]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[f1]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[f2]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[f3]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[3b]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[f4]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[43]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[45]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[f5]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[47]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 212 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; LoRaMacInitialization &rArr; RxWindowSetup &rArr; SX1276SetRx &rArr; SX1276SetChannel &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SPI_Write_Buf &rArr; SPI_Write &rArr; SPI_RW &rArr; GPIO_PinHigh
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[f6]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[6c]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[4a]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[f7]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[4c]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[d2]"></a>rand</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, rand.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_number
</UL>

<P><STRONG><a name="[5]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_mkl16z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mkl16z4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mkl16z4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mkl16z4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mkl16z4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>ADC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl16z4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>CMP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl16z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DAC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl16z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>DMA0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl16z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>DMA1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl16z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>DMA2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl16z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>DMA3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl16z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(RESET)
</UL>
<P><STRONG><a name="[f8]"></a>DefaultISR</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl16z4.o(.text), UNUSED)

<P><STRONG><a name="[10]"></a>FTFA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl16z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl16z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl16z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>I2S0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl16z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>LLW_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl16z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>LPTimer_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl16z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>LVD_LVW_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl16z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>MCG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl16z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>PIT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl16z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl16z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>RTC_Seconds_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl16z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>Reserved20_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl16z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>Reserved40_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl16z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>Reserved45_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl16z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl16z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl16z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>TPM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl16z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>TPM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl16z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>TPM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl16z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TSI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl16z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_mkl16z4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[4e]"></a>__2printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitMcu
</UL>

<P><STRONG><a name="[50]"></a>__printf</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, __printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[40]"></a>_printf_int_dec</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned (Weak Reference)
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[56]"></a>srand</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = srand
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_number
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[42]"></a>_rand_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_rand_2
</UL>

<P><STRONG><a name="[58]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[57]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[59]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[f9]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[c2]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
</UL>

<P><STRONG><a name="[fa]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[5a]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[fb]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[fc]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[fd]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[a6]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxChainCalibration
</UL>

<P><STRONG><a name="[fe]"></a>_dfixu</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, dfixui.o(.text), UNUSED)

<P><STRONG><a name="[5c]"></a>__aeabi_i2d_normalise</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[5b]"></a>__aeabi_i2d</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>

<P><STRONG><a name="[ff]"></a>_dflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[5d]"></a>__aeabi_ui2d</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxChainCalibration
</UL>

<P><STRONG><a name="[100]"></a>_dfltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[101]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[102]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[29]"></a>PORTA_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gpio.o(i.PORTA_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(RESET)
</UL>
<P><STRONG><a name="[103]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[104]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[6f]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitMcu
</UL>

<P><STRONG><a name="[105]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[d3]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_number
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDataToPC
</UL>

<P><STRONG><a name="[c1]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
</UL>

<P><STRONG><a name="[5e]"></a>_dadd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[106]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)

<P><STRONG><a name="[61]"></a>_dsub</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[107]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub.o(.text), UNUSED)

<P><STRONG><a name="[62]"></a>_drsb</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[be]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
</UL>

<P><STRONG><a name="[64]"></a>_ddiv</STRONG> (Thumb, 1072 bytes, Stack size 64 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drdiv
</UL>

<P><STRONG><a name="[63]"></a>_drdiv</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[a5]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxChainCalibration
</UL>

<P><STRONG><a name="[108]"></a>_dmul</STRONG> (Thumb, 558 bytes, Stack size 56 bytes, dmul.o(.text), UNUSED)

<P><STRONG><a name="[55]"></a>_printf_int_common</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding (Weak Reference)
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[4f]"></a>_printf_char_file</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[54]"></a>__rt_udiv10</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[67]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[68]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[44]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[49]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[109]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[69]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[10a]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[4d]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[6d]"></a>BoardInitMcu</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, board.o(i.BoardInitMcu))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = BoardInitMcu &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetRxIrq
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RegBuffer
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[77]"></a>BoardInitPeriph</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, board.o(i.BoardInitPeriph))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BoardInitPeriph &rArr; SX1276IoInit &rArr; GPIO_SetPinIsInput
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPinIsOutput
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPinIsInput
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IoInit
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7f]"></a>CSMAStart</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, csma.o(i.CSMAStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = CSMAStart &rArr; CSMAExecute &rArr; Execute &rArr; sendCMDToRelay &rArr; SendFrame &rArr; Send &rArr; SendFrameOnChannel &rArr; SX1276SetTxConfig &rArr; SX1276SetModem &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SPI_Write_Buf &rArr; SPI_Write &rArr; SPI_RW &rArr; GPIO_PinHigh
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSMAExecute
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCSMAToBuff
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepareCMDToRelay
</UL>

<P><STRONG><a name="[83]"></a>DebugMain</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, main.o(i.DebugMain))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = DebugMain &rArr; NBCMDWriteToFlash &rArr; WriteToFlash &rArr; FLASH_WriteNbyte &rArr; FLASH_WriteDword
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBCMDWriteToFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskHandleDataUnconFirmUp
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepareCMDToRelay
</UL>

<P><STRONG><a name="[86]"></a>FLASH_EraseNPage</STRONG> (Thumb, 50 bytes, Stack size 20 bytes, flash.o(i.FLASH_EraseNPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FLASH_EraseNPage
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erasepage
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetNbCMDInFlash
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToFlash
</UL>

<P><STRONG><a name="[87]"></a>FLASH_Erasepage</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, flash.o(i.FLASH_Erasepage))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseNPage
</UL>

<P><STRONG><a name="[89]"></a>FLASH_ReadDword</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, flash.o(i.FLASH_ReadDword))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ReadNbyte
</UL>

<P><STRONG><a name="[88]"></a>FLASH_ReadNbyte</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, flash.o(i.FLASH_ReadNbyte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_ReadNbyte
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ReadDword
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToFlash
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadNbCMDFromFlash
</UL>

<P><STRONG><a name="[8b]"></a>FLASH_Write4Byte</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, flash.o(i.FLASH_Write4Byte))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WriteDword
</UL>

<P><STRONG><a name="[8a]"></a>FLASH_WriteDword</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, flash.o(i.FLASH_WriteDword))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_WriteDword
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Write4Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WriteNbyte
</UL>

<P><STRONG><a name="[8c]"></a>FLASH_WriteNbyte</STRONG> (Thumb, 68 bytes, Stack size 28 bytes, flash.o(i.FLASH_WriteNbyte))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = FLASH_WriteNbyte &rArr; FLASH_WriteDword
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WriteDword
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToFlash
</UL>

<P><STRONG><a name="[90]"></a>GPIO_PinHigh</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, gpio.o(i.GPIO_PinHigh))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_PinHigh
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnLedBoardInitPeriphEvent
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioBoard
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Write
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Read
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RW
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Reset
</UL>

<P><STRONG><a name="[91]"></a>GPIO_PinLow</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, gpio.o(i.GPIO_PinLow))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_PinLow
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioBoard
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Write
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Read
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RW
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Reset
</UL>

<P><STRONG><a name="[ac]"></a>GPIO_PinReadInput</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, gpio.o(i.GPIO_PinReadInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_PinReadInput
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RW
</UL>

<P><STRONG><a name="[92]"></a>GPIO_PinToggle</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, gpio.o(i.GPIO_PinToggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_PinToggle
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnLedBoardInitPeriphEvent
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioBoard
</UL>

<P><STRONG><a name="[78]"></a>GPIO_SetPinIsInput</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, gpio.o(i.GPIO_SetPinIsInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_SetPinIsInput
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IoInit
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitPeriph
</UL>

<P><STRONG><a name="[8d]"></a>GPIO_SetPinIsInterrupt</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, gpio.o(i.GPIO_SetPinIsInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_SetPinIsInterrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IoIrqInit
</UL>

<P><STRONG><a name="[79]"></a>GPIO_SetPinIsOutput</STRONG> (Thumb, 90 bytes, Stack size 12 bytes, gpio.o(i.GPIO_SetPinIsOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_SetPinIsOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IoInit
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitPeriph
</UL>

<P><STRONG><a name="[ca]"></a>GetMilSecTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(i.GetMilSecTick))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeExpired
</UL>

<P><STRONG><a name="[8f]"></a>GpioBoard</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, gpio_board.o(i.GpioBoard))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GpioBoard &rArr; GPIO_PinToggle
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinToggle
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinHigh
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinLow
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioBoardMain
</UL>

<P><STRONG><a name="[93]"></a>GpioBoardMain</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, main.o(i.GpioBoardMain))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GpioBoardMain &rArr; GpioBoard &rArr; GPIO_PinToggle
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioBoard
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskHandleTxDone
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskHandleJoin_Req
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskHandleDataUnconFirmUp
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskHandleDataConfirmUp
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendCMDToRelay
</UL>

<P><STRONG><a name="[94]"></a>HandleDataConfirmUp</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, main.o(i.HandleDataConfirmUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HandleDataConfirmUp &rArr; sendDataToPC &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDataToPC
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskHandleDataConfirmUp
</UL>

<P><STRONG><a name="[96]"></a>LoRaMacInitialization</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, loramac_qh.o(i.LoRaMacInitialization))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = LoRaMacInitialization &rArr; RxWindowSetup &rArr; SX1276SetRx &rArr; SX1276SetChannel &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SPI_Write_Buf &rArr; SPI_Write &rArr; SPI_RW &rArr; GPIO_PinHigh
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxWindowSetup
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[84]"></a>NBCMDWriteToFlash</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, debug.o(i.NBCMDWriteToFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = NBCMDWriteToFlash &rArr; WriteToFlash &rArr; FLASH_WriteNbyte &rArr; FLASH_WriteDword
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMain
</UL>

<P><STRONG><a name="[2f]"></a>OnLedBoardInitPeriphEvent</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, board.o(i.OnLedBoardInitPeriphEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OnLedBoardInitPeriphEvent &rArr; GPIO_PinToggle
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinToggle
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinHigh
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board.o(i.BoardInitPeriph)
</UL>
<P><STRONG><a name="[9b]"></a>OnRadioRxDone</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, loramac_qh.o(i.OnRadioRxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = OnRadioRxDone &rArr; TimerStart
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio0Irq
</UL>

<P><STRONG><a name="[9c]"></a>OnRadioTxDone</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, loramac_qh.o(i.OnRadioTxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = OnRadioTxDone &rArr; TimerStart
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio0Irq
</UL>

<P><STRONG><a name="[2a]"></a>PORTC_PORTD_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gpio.o(i.PORTC_PORTD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = PORTC_PORTD_IRQHandler &rArr; SX1276OnDio0Irq &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SPI_Write_Buf &rArr; SPI_Write &rArr; SPI_RW &rArr; GPIO_PinHigh
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio0Irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>SPI_Init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, spi_gpio.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_Init &rArr; GPIO_SetPinIsInput
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPinIsOutput
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPinIsInput
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitMcu
</UL>

<P><STRONG><a name="[aa]"></a>SPI_RW</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, spi_gpio.o(i.SPI_RW))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SPI_RW &rArr; GPIO_PinHigh
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinHigh
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinReadInput
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinLow
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Write
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Read
</UL>

<P><STRONG><a name="[ad]"></a>SPI_Read</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, spi_gpio.o(i.SPI_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SPI_Read &rArr; SPI_RW &rArr; GPIO_PinHigh
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinHigh
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RW
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinLow
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Read_Buf
</UL>

<P><STRONG><a name="[ae]"></a>SPI_Read_Buf</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, spi_gpio.o(i.SPI_Read_Buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SPI_Read_Buf &rArr; SPI_Read &rArr; SPI_RW &rArr; GPIO_PinHigh
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
</UL>

<P><STRONG><a name="[af]"></a>SPI_Write</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, spi_gpio.o(i.SPI_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SPI_Write &rArr; SPI_RW &rArr; GPIO_PinHigh
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinHigh
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RW
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinLow
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Write_Buf
</UL>

<P><STRONG><a name="[b0]"></a>SPI_Write_Buf</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, spi_gpio.o(i.SPI_Write_Buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SPI_Write_Buf &rArr; SPI_Write &rArr; SPI_RW &rArr; GPIO_PinHigh
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
</UL>

<P><STRONG><a name="[c4]"></a>SX1276GetPaSelect</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, board.o(i.SX1276GetPaSelect))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
</UL>

<P><STRONG><a name="[97]"></a>SX1276Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sx1276_qh.o(i.SX1276Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = SX1276Init &rArr; RxChainCalibration &rArr; SX1276SetChannel &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SPI_Write_Buf &rArr; SPI_Write &rArr; SPI_RW &rArr; GPIO_PinHigh
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IoIrqInit
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Reset
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxChainCalibration
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
</UL>

<P><STRONG><a name="[b3]"></a>SX1276IoIrqInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, board.o(i.SX1276IoIrqInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SX1276IoIrqInit &rArr; GPIO_SetPinIsInterrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPinIsInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
</UL>

<P><STRONG><a name="[9d]"></a>SX1276OnDio0Irq</STRONG> (Thumb, 304 bytes, Stack size 16 bytes, sx1276_qh.o(i.SX1276OnDio0Irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = SX1276OnDio0Irq &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SPI_Write_Buf &rArr; SPI_Write &rArr; SPI_RW &rArr; GPIO_PinHigh
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioTxDone
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadFifo
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORTC_PORTD_IRQHandler
</UL>

<P><STRONG><a name="[b5]"></a>SX1276Random</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, sx1276_qh.o(i.SX1276Random))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = SX1276Random &rArr; SX1276SetSleep &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SPI_Write_Buf &rArr; SPI_Write &rArr; SPI_RW &rArr; GPIO_PinHigh
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetSleep
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_number
</UL>

<P><STRONG><a name="[a4]"></a>SX1276Read</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, sx1276_qh.o(i.SX1276Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = SX1276Read &rArr; SX1276ReadBuffer &rArr; SPI_Read_Buf &rArr; SPI_Read &rArr; SPI_RW &rArr; GPIO_PinHigh
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Random
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTx
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio0Irq
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxChainCalibration
</UL>

<P><STRONG><a name="[b9]"></a>SX1276ReadBuffer</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, sx1276_qh.o(i.SX1276ReadBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SX1276ReadBuffer &rArr; SPI_Read_Buf &rArr; SPI_Read &rArr; SPI_RW &rArr; GPIO_PinHigh
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Read_Buf
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadFifo
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>

<P><STRONG><a name="[b4]"></a>SX1276ReadFifo</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, sx1276_qh.o(i.SX1276ReadFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = SX1276ReadFifo &rArr; SX1276ReadBuffer &rArr; SPI_Read_Buf &rArr; SPI_Read &rArr; SPI_RW &rArr; GPIO_PinHigh
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio0Irq
</UL>

<P><STRONG><a name="[b1]"></a>SX1276Reset</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sx1276_qh.o(i.SX1276Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SX1276Reset &rArr; GPIO_PinHigh
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinHigh
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinLow
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
</UL>

<P><STRONG><a name="[ba]"></a>SX1276Send</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, sx1276_qh.o(i.SX1276Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = SX1276Send &rArr; SX1276SetTx &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SPI_Write_Buf &rArr; SPI_Write &rArr; SPI_RW &rArr; GPIO_PinHigh
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteFifo
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTx
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetStby
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrameOnChannel
</UL>

<P><STRONG><a name="[98]"></a>SX1276SetChannel</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, sx1276_qh.o(i.SX1276SetChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = SX1276SetChannel &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SPI_Write_Buf &rArr; SPI_Write &rArr; SPI_RW &rArr; GPIO_PinHigh
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxChainCalibration
</UL>

<P><STRONG><a name="[bf]"></a>SX1276SetMaxPayloadLength</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, sx1276_qh.o(i.SX1276SetMaxPayloadLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = SX1276SetMaxPayloadLength &rArr; SX1276SetModem &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SPI_Write_Buf &rArr; SPI_Write &rArr; SPI_RW &rArr; GPIO_PinHigh
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrameOnChannel
</UL>

<P><STRONG><a name="[b6]"></a>SX1276SetModem</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, sx1276_qh.o(i.SX1276SetModem))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = SX1276SetModem &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SPI_Write_Buf &rArr; SPI_Write &rArr; SPI_RW &rArr; GPIO_PinHigh
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetMaxPayloadLength
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Random
</UL>

<P><STRONG><a name="[b2]"></a>SX1276SetOpMode</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, sx1276_qh.o(i.SX1276SetOpMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SPI_Write_Buf &rArr; SPI_Write &rArr; SPI_RW &rArr; GPIO_PinHigh
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Random
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTx
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetStby
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetSleep
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
</UL>

<P><STRONG><a name="[a9]"></a>SX1276SetRx</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, sx1276_qh.o(i.SX1276SetRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = SX1276SetRx &rArr; SX1276SetChannel &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SPI_Write_Buf &rArr; SPI_Write &rArr; SPI_RW &rArr; GPIO_PinHigh
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxWindowSetup
</UL>

<P><STRONG><a name="[a8]"></a>SX1276SetRxConfig</STRONG> (Thumb, 438 bytes, Stack size 24 bytes, sx1276_qh.o(i.SX1276SetRxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = SX1276SetRxConfig &rArr; SX1276SetModem &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SPI_Write_Buf &rArr; SPI_Write &rArr; SPI_RW &rArr; GPIO_PinHigh
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxWindowSetup
</UL>

<P><STRONG><a name="[b8]"></a>SX1276SetSleep</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sx1276_qh.o(i.SX1276SetSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = SX1276SetSleep &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SPI_Write_Buf &rArr; SPI_Write &rArr; SPI_RW &rArr; GPIO_PinHigh
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Random
</UL>

<P><STRONG><a name="[bb]"></a>SX1276SetStby</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sx1276_qh.o(i.SX1276SetStby))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = SX1276SetStby &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SPI_Write_Buf &rArr; SPI_Write &rArr; SPI_RW &rArr; GPIO_PinHigh
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
</UL>

<P><STRONG><a name="[bd]"></a>SX1276SetTx</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, sx1276_qh.o(i.SX1276SetTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = SX1276SetTx &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SPI_Write_Buf &rArr; SPI_Write &rArr; SPI_RW &rArr; GPIO_PinHigh
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
</UL>

<P><STRONG><a name="[c3]"></a>SX1276SetTxConfig</STRONG> (Thumb, 550 bytes, Stack size 32 bytes, sx1276_qh.o(i.SX1276SetTxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = SX1276SetTxConfig &rArr; SX1276SetModem &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SPI_Write_Buf &rArr; SPI_Write &rArr; SPI_RW &rArr; GPIO_PinHigh
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetPaSelect
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrameOnChannel
</UL>

<P><STRONG><a name="[a7]"></a>SX1276Write</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, sx1276_qh.o(i.SX1276Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = SX1276Write &rArr; SX1276WriteBuffer &rArr; SPI_Write_Buf &rArr; SPI_Write &rArr; SPI_RW &rArr; GPIO_PinHigh
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetMaxPayloadLength
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Random
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTx
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio0Irq
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxChainCalibration
</UL>

<P><STRONG><a name="[c5]"></a>SX1276WriteBuffer</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, sx1276_qh.o(i.SX1276WriteBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SX1276WriteBuffer &rArr; SPI_Write_Buf &rArr; SPI_Write &rArr; SPI_RW &rArr; GPIO_PinHigh
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Write_Buf
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteFifo
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
</UL>

<P><STRONG><a name="[bc]"></a>SX1276WriteFifo</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, sx1276_qh.o(i.SX1276WriteFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = SX1276WriteFifo &rArr; SX1276WriteBuffer &rArr; SPI_Write_Buf &rArr; SPI_Write &rArr; SPI_RW &rArr; GPIO_PinHigh
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
</UL>

<P><STRONG><a name="[c6]"></a>Send</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, loramac_qh.o(i.Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = Send &rArr; SendFrameOnChannel &rArr; SX1276SetTxConfig &rArr; SX1276SetModem &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SPI_Write_Buf &rArr; SPI_Write &rArr; SPI_RW &rArr; GPIO_PinHigh
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrameOnChannel
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskHandleJoin_Req
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskHandleDataConfirmUp
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrame
</UL>

<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, timer.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 320 bytes, Stack size 16 bytes, system_mkl16z4.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SystemCoreClockUpdate &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitMcu
</UL>

<P><STRONG><a name="[2b]"></a>SystemInit</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, system_mkl16z4.o(i.SystemInit))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitMcu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(.text)
</UL>
<P><STRONG><a name="[7a]"></a>TimerStart</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, timer.o(i.TimerStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TimerStart
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMilSecTick
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioTxDone
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Execute
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSend
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitPeriph
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>

<P><STRONG><a name="[81]"></a>TypeOfDataNow</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, loramac_qh.o(i.TypeOfDataNow))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskHandleDataUnconFirmUp
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareFrame
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSend
</UL>

<P><STRONG><a name="[17]"></a>UART0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uart.o(i.UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART0_IRQHandler &rArr; UART_DRIVER_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVER_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>UART1_IRQHandler</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, uart.o(i.UART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UART1_IRQHandler &rArr; TimerStart
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>UART2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uart.o(i.UART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART2_IRQHandler &rArr; UART_DRIVER_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVER_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(RESET)
</UL>
<P><STRONG><a name="[cc]"></a>UART_GetChar</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, uart.o(i.UART_GetChar))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVER_IRQHandler
</UL>

<P><STRONG><a name="[71]"></a>UART_Init</STRONG> (Thumb, 672 bytes, Stack size 48 bytes, uart.o(i.UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitMcu
</UL>

<P><STRONG><a name="[73]"></a>UART_Open</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, uart.o(i.UART_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_Open &rArr; UART_SetTransmitter
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetTransmitter
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetReciver
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitMcu
</UL>

<P><STRONG><a name="[a1]"></a>UART_PutChar</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, uart.o(i.UART_PutChar))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PutString
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadNbCMDFromFlash
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDataToPC
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[a2]"></a>UART_PutString</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, uart.o(i.UART_PutString))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetNbCMDInFlash
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadNbCMDFromFlash
</UL>

<P><STRONG><a name="[72]"></a>UART_RegBuffer</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, uart.o(i.UART_RegBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_RegBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bufClear
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitMcu
</UL>

<P><STRONG><a name="[cf]"></a>UART_SetReciver</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, uart.o(i.UART_SetReciver))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_SetReciver
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
</UL>

<P><STRONG><a name="[74]"></a>UART_SetRxIrq</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, uart.o(i.UART_SetRxIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_SetRxIrq
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitMcu
</UL>

<P><STRONG><a name="[ce]"></a>UART_SetTransmitter</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, uart.o(i.UART_SetTransmitter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_SetTransmitter
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
</UL>

<P><STRONG><a name="[c0]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sx1276_qh.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[cd]"></a>bufAddDat</STRONG> (Thumb, 144 bytes, Stack size 0 bytes, buff.o(i.bufAddDat))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRIVER_IRQHandler
</UL>

<P><STRONG><a name="[d0]"></a>bufClear</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, buff.o(i.bufClear))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RegBuffer
</UL>

<P><STRONG><a name="[b7]"></a>delay_ms</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, driver_common.o(i.delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Random
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Reset
</UL>

<P><STRONG><a name="[ab]"></a>delay_us</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, driver_common.o(i.delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RW
</UL>

<P><STRONG><a name="[2d]"></a>fputc</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, uart.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PutChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[76]"></a>i2c_init</STRONG> (Thumb, 154 bytes, Stack size 12 bytes, i2c.o(i.i2c_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = i2c_init
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitMcu
</UL>

<P><STRONG><a name="[48]"></a>main</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 212 + Unknown Stack Size
<LI>Call Chain = main &rArr; LoRaMacInitialization &rArr; RxWindowSetup &rArr; SX1276SetRx &rArr; SX1276SetChannel &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SPI_Write_Buf &rArr; SPI_Write &rArr; SPI_RW &rArr; GPIO_PinHigh
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processTimer
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitPeriph
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitMcu
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[9f]"></a>memcpy1</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, utilities.o(i.memcpy1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareFrame
</UL>

<P><STRONG><a name="[d1]"></a>processTimer</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, timer.o(i.processTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = processTimer &rArr; TimeExpired
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeExpired
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[82]"></a>random_number</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, utilities.o(i.random_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = random_number &rArr; SX1276Random &rArr; SX1276SetSleep &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SPI_Write_Buf &rArr; SPI_Write &rArr; SPI_RW &rArr; GPIO_PinHigh
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Random
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSend
</UL>

<P><STRONG><a name="[37]"></a>resetNbCMDInFlash</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, debug.o(i.resetNbCMDInFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = resetNbCMDInFlash &rArr; FLASH_EraseNPage
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PutString
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseNPage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(i.UART1_IRQHandler)
</UL>
<P><STRONG><a name="[85]"></a>sendCMDToRelay</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, main.o(i.sendCMDToRelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = sendCMDToRelay &rArr; SendFrame &rArr; Send &rArr; SendFrameOnChannel &rArr; SX1276SetTxConfig &rArr; SX1276SetModem &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SPI_Write_Buf &rArr; SPI_Write &rArr; SPI_RW &rArr; GPIO_PinHigh
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioBoardMain
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrame
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareTxFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Execute
</UL>

<P><STRONG><a name="[95]"></a>sendDataToPC</STRONG> (Thumb, 332 bytes, Stack size 64 bytes, debug.o(i.sendDataToPC))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sendDataToPC &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PutChar
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleDataConfirmUp
</UL>

<P><STRONG><a name="[36]"></a>sendNbCMDToPC</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, debug.o(i.sendNbCMDToPC))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sendNbCMDToPC &rArr; ReadNbCMDFromFlash &rArr; FLASH_ReadNbyte
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadNbCMDFromFlash
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(i.UART1_IRQHandler)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[d4]"></a>PrepareTxFrame</STRONG> (Thumb, 226 bytes, Stack size 20 bytes, main.o(i.PrepareTxFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PrepareTxFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendCMDToRelay
</UL>

<P><STRONG><a name="[c8]"></a>SendFrame</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(i.SendFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = SendFrame &rArr; Send &rArr; SendFrameOnChannel &rArr; SX1276SetTxConfig &rArr; SX1276SetModem &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SPI_Write_Buf &rArr; SPI_Write &rArr; SPI_RW &rArr; GPIO_PinHigh
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendCMDToRelay
</UL>

<P><STRONG><a name="[38]"></a>prepareCMDToRelay</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, main.o(i.prepareCMDToRelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = prepareCMDToRelay &rArr; CSMAStart &rArr; CSMAExecute &rArr; Execute &rArr; sendCMDToRelay &rArr; SendFrame &rArr; Send &rArr; SendFrameOnChannel &rArr; SX1276SetTxConfig &rArr; SX1276SetModem &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SPI_Write_Buf &rArr; SPI_Write &rArr; SPI_RW &rArr; GPIO_PinHigh
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSMAStart
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMain
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[70]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, board.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitMcu
</UL>

<P><STRONG><a name="[7b]"></a>SX1276IoInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, board.o(i.SX1276IoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SX1276IoInit &rArr; GPIO_SetPinIsInput
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPinIsOutput
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPinIsInput
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitPeriph
</UL>

<P><STRONG><a name="[80]"></a>AddCSMAToBuff</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, csma.o(i.AddCSMAToBuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = AddCSMAToBuff
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSMAStart
</UL>

<P><STRONG><a name="[7e]"></a>CSMACancel</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, csma.o(i.CSMACancel))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSMAExecute
</UL>

<P><STRONG><a name="[7c]"></a>CSMACycle</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, csma.o(i.CSMACycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = CSMACycle &rArr; CSMAExecute &rArr; Execute &rArr; sendCMDToRelay &rArr; SendFrame &rArr; Send &rArr; SendFrameOnChannel &rArr; SX1276SetTxConfig &rArr; SX1276SetModem &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SPI_Write_Buf &rArr; SPI_Write &rArr; SPI_RW &rArr; GPIO_PinHigh
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSMAExecute
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSend
</UL>

<P><STRONG><a name="[7d]"></a>CSMAExecute</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, csma.o(i.CSMAExecute))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = CSMAExecute &rArr; Execute &rArr; sendCMDToRelay &rArr; SendFrame &rArr; Send &rArr; SendFrameOnChannel &rArr; SX1276SetTxConfig &rArr; SX1276SetModem &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SPI_Write_Buf &rArr; SPI_Write &rArr; SPI_RW &rArr; GPIO_PinHigh
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Execute
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSMACancel
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSMACycle
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSMAStart
</UL>

<P><STRONG><a name="[31]"></a>CheckSend</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, csma.o(i.CheckSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = CheckSend &rArr; CSMACycle &rArr; CSMAExecute &rArr; Execute &rArr; sendCMDToRelay &rArr; SendFrame &rArr; Send &rArr; SendFrameOnChannel &rArr; SX1276SetTxConfig &rArr; SX1276SetModem &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SPI_Write_Buf &rArr; SPI_Write &rArr; SPI_RW &rArr; GPIO_PinHigh
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_number
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeOfDataNow
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSMACycle
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> csma.o(i.Execute)
</UL>
<P><STRONG><a name="[30]"></a>Execute</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, csma.o(i.Execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = Execute &rArr; sendCMDToRelay &rArr; SendFrame &rArr; Send &rArr; SendFrameOnChannel &rArr; SX1276SetTxConfig &rArr; SX1276SetModem &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SPI_Write_Buf &rArr; SPI_Write &rArr; SPI_RW &rArr; GPIO_PinHigh
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendCMDToRelay
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSMAExecute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> csma.o(i.CheckSend)
</UL>
<P><STRONG><a name="[a0]"></a>ReadNbCMDFromFlash</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, debug.o(i.ReadNbCMDFromFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ReadNbCMDFromFlash &rArr; FLASH_ReadNbyte
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PutString
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PutChar
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ReadNbyte
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendNbCMDToPC
</UL>

<P><STRONG><a name="[9a]"></a>WriteToFlash</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, debug.o(i.WriteToFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = WriteToFlash &rArr; FLASH_WriteNbyte &rArr; FLASH_WriteDword
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WriteNbyte
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ReadNbyte
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseNPage
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBCMDWriteToFlash
</UL>

<P><STRONG><a name="[9e]"></a>PrepareFrame</STRONG> (Thumb, 392 bytes, Stack size 24 bytes, loramac_qh.o(i.PrepareFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PrepareFrame &rArr; memcpy1
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeOfDataNow
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
</UL>

<P><STRONG><a name="[99]"></a>RxWindowSetup</STRONG> (Thumb, 66 bytes, Stack size 48 bytes, loramac_qh.o(i.RxWindowSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = RxWindowSetup &rArr; SX1276SetRx &rArr; SX1276SetChannel &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SPI_Write_Buf &rArr; SPI_Write &rArr; SPI_RW &rArr; GPIO_PinHigh
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskHandleTxDone
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
</UL>

<P><STRONG><a name="[c7]"></a>SendFrameOnChannel</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, loramac_qh.o(i.SendFrameOnChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = SendFrameOnChannel &rArr; SX1276SetTxConfig &rArr; SX1276SetModem &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SPI_Write_Buf &rArr; SPI_Write &rArr; SPI_RW &rArr; GPIO_PinHigh
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetMaxPayloadLength
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
</UL>

<P><STRONG><a name="[33]"></a>TaskHandleDataConfirmUp</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, loramac_qh.o(i.TaskHandleDataConfirmUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = TaskHandleDataConfirmUp &rArr; Send &rArr; SendFrameOnChannel &rArr; SX1276SetTxConfig &rArr; SX1276SetModem &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SPI_Write_Buf &rArr; SPI_Write &rArr; SPI_RW &rArr; GPIO_PinHigh
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleDataConfirmUp
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioBoardMain
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac_qh.o(i.OnRadioRxDone)
</UL>
<P><STRONG><a name="[34]"></a>TaskHandleDataUnconFirmUp</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, loramac_qh.o(i.TaskHandleDataUnconFirmUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = TaskHandleDataUnconFirmUp &rArr; DebugMain &rArr; NBCMDWriteToFlash &rArr; WriteToFlash &rArr; FLASH_WriteNbyte &rArr; FLASH_WriteDword
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeOfDataNow
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioBoardMain
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMain
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac_qh.o(i.OnRadioRxDone)
</UL>
<P><STRONG><a name="[32]"></a>TaskHandleJoin_Req</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, loramac_qh.o(i.TaskHandleJoin_Req))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = TaskHandleJoin_Req &rArr; Send &rArr; SendFrameOnChannel &rArr; SX1276SetTxConfig &rArr; SX1276SetModem &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SPI_Write_Buf &rArr; SPI_Write &rArr; SPI_RW &rArr; GPIO_PinHigh
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioBoardMain
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac_qh.o(i.OnRadioRxDone)
</UL>
<P><STRONG><a name="[35]"></a>TaskHandleTxDone</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, loramac_qh.o(i.TaskHandleTxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = TaskHandleTxDone &rArr; RxWindowSetup &rArr; SX1276SetRx &rArr; SX1276SetChannel &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SPI_Write_Buf &rArr; SPI_Write &rArr; SPI_RW &rArr; GPIO_PinHigh
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxWindowSetup
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioBoardMain
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac_qh.o(i.OnRadioTxDone)
</UL>
<P><STRONG><a name="[a3]"></a>RxChainCalibration</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, sx1276_qh.o(i.RxChainCalibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = RxChainCalibration &rArr; SX1276SetChannel &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SPI_Write_Buf &rArr; SPI_Write &rArr; SPI_RW &rArr; GPIO_PinHigh
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
</UL>

<P><STRONG><a name="[8e]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gpio.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPinIsInterrupt
</UL>

<P><STRONG><a name="[c9]"></a>TimeExpired</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, timer.o(i.TimeExpired))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TimeExpired
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMilSecTick
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processTimer
</UL>

<P><STRONG><a name="[cb]"></a>UART_DRIVER_IRQHandler</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, uart.o(i.UART_DRIVER_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DRIVER_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bufAddDat
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetChar
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[60]"></a>_dadd1</STRONG> (Thumb, 290 bytes, Stack size 20 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[5f]"></a>_dsub1</STRONG> (Thumb, 470 bytes, Stack size 40 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[2e]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[6b]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[66]"></a>_printf_post_padding</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[65]"></a>_printf_pre_padding</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[52]"></a>_printf_truncate_signed</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[53]"></a>_printf_truncate_unsigned</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<HR></body></html>
